// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package frosting

import "sync"

// IngredientQueue the queue of Ingredients
type IngredientSet struct {
	items map[*Ingredient]bool
	lock  sync.RWMutex
}

// New creates a new IngredientQueue
func NewIngredientSet(items ...*Ingredient) *IngredientSet {
	set := &IngredientSet{
		items: make(map[*Ingredient]bool),
	}

	for _, item := range items {
		set.items[item] = true
	}

	return set
}

// Enqueue adds an Ingredient to the end of the queue
func (s *IngredientSet) Add(t *Ingredient) {
	s.lock.Lock()
	defer s.lock.Unlock()
	s.items[t] = true
}

// Dequeue removes an Ingredient from the start of the queue
func (s *IngredientSet) Remove(t *Ingredient) {
	s.lock.Lock()
	defer s.lock.Unlock()
	delete(s.items, t)
}

func (s *IngredientSet) Contains(t *Ingredient) bool {
	s.lock.RLock()
	defer s.lock.RUnlock()

	return s.items[t]
}

// Front returns the item next in the queue, without removing it
func (s *IngredientSet) Cardinality() int {
	s.lock.RLock()
	defer s.lock.RUnlock()
	return len(s.items)
}

func (s *IngredientSet) Ingredients() []*Ingredient {
	s.lock.RLock()
	defer s.lock.RUnlock()

	var itemList []*Ingredient
	for key, _ := range s.items {
		itemList = append(itemList, key)
	}

	return itemList
}

// Set Difference: The relative complement or set difference of sets A and B,
// denoted A – B, is the set of all elements in A that are not in B.
// In set-builder notation, A – B = {x ∈ U : x ∈ A and x ∉ B}= A ∩ B'.
func (s *IngredientSet) Difference(other *IngredientSet) *IngredientSet {
	s.lock.RLock()
	defer s.lock.RUnlock()

	diff := NewIngredientSet()

	for key, _ := range s.items {
		if !other.items[key] {
			diff.items[key] = true
		}
	}

	return diff
}

func (s *IngredientSet) Clone() *IngredientSet {
	s.lock.RLock()
	defer s.lock.RUnlock()

	return NewIngredientSet(s.Ingredients()...)
}
