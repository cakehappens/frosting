// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package frosting

import "sync"

// IngredientQueue the queue of Ingredients
type IngredientQueue struct {
	items []*Ingredient
	lock  sync.RWMutex
}

// New creates a new IngredientQueue
func NewIngredientQueue() *IngredientQueue {
	return &IngredientQueue{
		items: []*Ingredient{},
	}
}

// Enqueue adds an Ingredient to the end of the queue
func (s *IngredientQueue) Enqueue(t *Ingredient) {
	s.lock.Lock()
	defer s.lock.Unlock()
	s.items = append(s.items, t)
}

// Dequeue removes an Ingredient from the start of the queue
func (s *IngredientQueue) Dequeue() (*Ingredient, bool) {
	s.lock.Lock()
	defer s.lock.Unlock()

	if len(s.items) > 0 {
		item := s.items[0]
		s.items = s.items[1:len(s.items)]
		return item, true
	}

	return nil, false
}

// Front returns the item next in the queue, without removing it
func (s *IngredientQueue) Front() *Ingredient {
	s.lock.RLock()
	defer s.lock.RUnlock()
	return s.items[0]
}

// IsEmpty returns true if the queue is empty
func (s *IngredientQueue) IsEmpty() bool {
	s.lock.RLock()
	defer s.lock.RUnlock()
	return s.Length() == 0
}

// Size returns the number of Ingredients in the queue
func (s *IngredientQueue) Length() int {
	s.lock.RLock()
	defer s.lock.RUnlock()
	return len(s.items)
}
